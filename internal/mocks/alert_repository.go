// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/shopally-ai/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// AlertRepository is an autogenerated mock type for the AlertRepository type
type AlertRepository struct {
	mock.Mock
}

// CreateAlert provides a mock function with given fields: alert
func (_m *AlertRepository) CreateAlert(alert *domain.Alert) error {
	ret := _m.Called(alert)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Alert) error); ok {
		r0 = rf(alert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAlert provides a mock function with given fields: alertID
func (_m *AlertRepository) DeleteAlert(alertID string) error {
	ret := _m.Called(alertID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alertID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlert provides a mock function with given fields: alertID
func (_m *AlertRepository) GetAlert(alertID string) (*domain.Alert, error) {
	ret := _m.Called(alertID)

	if len(ret) == 0 {
		panic("no return value specified for GetAlert")
	}

	var r0 *domain.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Alert, error)); ok {
		return rf(alertID)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Alert); ok {
		r0 = rf(alertID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alertID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAlertRepository creates a new instance of AlertRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertRepository {
	mock := &AlertRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
